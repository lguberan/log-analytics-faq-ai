package com.guberan.logfaqai.controller;

import com.guberan.logfaqai.model.Question;
import com.guberan.logfaqai.repository.QuestionRepository;
import jakarta.transaction.Transactional;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.http.MediaType;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.web.servlet.MockMvc;

import java.time.LocalDateTime;

import static org.junit.jupiter.api.Assertions.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

@SpringBootTest
@AutoConfigureMockMvc
@Transactional
class AdminControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private QuestionRepository questionRepository;

    @Test
    @WithMockUser(username = "admin", roles = {"ADMIN"})
    void getQuestions() throws Exception {
        mockMvc.perform(get("/api/admin/questions?validated=false"))
                .andExpect(status().isOk());
    }

    @Test
    @WithMockUser(username = "admin", roles = {"ADMIN"})
    void shouldValidateAndUpdateAnswer() throws Exception {
        Question question = new Question();
        question.setText("What is Kafka?");
        question.setAnswer("Old answer");
        question.setValidated(false);
        question.setAutoGenerated(true);
        question.setAskedAt(LocalDateTime.now());

        question = questionRepository.save(question);

        // Prepare JSON for the corrected answer
        String jsonBody = """
                {
                  "correctedAnswer": "Kafka is a distributed streaming platform."
                }
                """;

        mockMvc.perform(post("/api/admin/questions/" + question.getId() + "/validate")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(jsonBody))
                .andExpect(status().isOk());

        Question updated = questionRepository.findById(question.getId()).orElseThrow();
        assertEquals("Kafka is a distributed streaming platform.", updated.getAnswer());
        assertTrue(updated.isValidated());
        assertFalse(updated.isAutoGenerated());
    }
}
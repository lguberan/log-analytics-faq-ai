package com.guberan.logfaqai.service;

import com.guberan.logfaqai.dto.AskResponse;
import com.guberan.logfaqai.model.Question;
import com.guberan.logfaqai.repository.QuestionRepository;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.verify;

@ExtendWith(MockitoExtension.class)
class FaqServiceTest {

    @Mock
    private OpenAiService openAiService;

    @Mock
    private QuestionRepository questionRepository;

    @InjectMocks
    private FaqService faqService;

    @Test
    void shouldGenerateAndStoreQuestion() {
        String questionText = "How does Kafka work in this project?";
        String answer = "Kafka is used for real-time log ingestion.";

        // simulate GPT response
        Mockito.when(openAiService.generateAnswer(questionText)).thenReturn(answer);

        // when
        AskResponse response = faqService.processQuestion(questionText);

        // then
        assertEquals(questionText, response.getQuestion());
        assertEquals(answer, response.getAnswer());
        assertFalse(response.isValidated());

        // verify save() called with expected object
        ArgumentCaptor<Question> captor = ArgumentCaptor.forClass(Question.class);
        verify(questionRepository).save(captor.capture());

        Question saved = captor.getValue();
        assertEquals(questionText, saved.getText());
        assertEquals(answer, saved.getAnswer());
        assertFalse(saved.isValidated());
        assertTrue(saved.isAutoGenerated());
        assertNotNull(saved.getAskedAt());
    }
}